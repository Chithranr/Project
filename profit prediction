mport pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.metrics import mean_absolute_error, mean_absolute_percentage_error
df = pd.read_csv("C:/Users/CS WPT/Documents/dataset/50_Startups.csv")
print(df)
print(df.head())
print(df.info())
print(df.describe())
df = df.dropna()
grouped_data = df.groupby('State').mean().reset_index()
categorical_features = ['State']
onehotencoder = OneHotEncoder()
encoded_features = onehotencoder.fit_transform(grouped_data[categorical_features]).toarray()
encoded_df = pd.DataFrame(encoded_features, columns=onehotencoder.get_feature_names_out(categorical_features))
grouped_data = pd.concat([grouped_data, encoded_df], axis=1).drop(columns=categorical_features)
X_grouped = grouped_data[['R&D Spend', 'Administration', 'Marketing Spend'] + list(encoded_df.columns)]
y_grouped = grouped_data['Profit']
ss = StandardScaler()
X = df[['R&D Spend', 'Administration', 'Marketing Spend']]
X = ss.fit_transform(X)
y = df['Profit']
x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=2529)
lr = LinearRegression()
lr.fit(x_train, y_train)
y_pred = lr.predict(x_test)
mae = mean_absolute_error(y_test, y_pred)
mape = mean_absolute_percentage_error(y_test, y_pred)
r2_score = lr.score(x_test, y_test)
print(f"Mean Absolute Error: {mae}")
print(f"Mean Absolute Percentage Error: {mape}")
print(f"R^2 Score: {r2_score}")
plt.figure(figsize=(5, 5))
sns.heatmap(grouped_data.corr(), annot=True, cmap='coolwarm', fmt='.2f')
plt.title('Correlation Heatmap')
plt.show()
sns.pairplot(df)
plt.show()
plt.figure(figsize=(8, 6))
sns.histplot(df['Profit'], kde=True, bins=20)
plt.title('Distribution of Profit')
plt.xlabel('State')
plt.ylabel('Adminstration')
plt.show()
import seaborn as sns
sns.countplot(x='State',data=df)
plt.show()
sns.displot(df['Profit'])
plt.show()
sns.scatterplot(x=df['State'],y=df['Profit'],data=df)
plt.show(
